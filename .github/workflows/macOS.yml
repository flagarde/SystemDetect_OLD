name: macOS

on:
    push:
    pull_request:
    schedule:
    #Every Sunday at midnight
    - cron:  '0 0 * * 0'

env:
  CMAKE_VERSION: 3.16.2
  NINJA_VERSION: 1.10.0
  BUILD_TYPE: Release
  CCACHE_VERSION: 3.7.7
  CC: clang
  CXX: clang++
  artifact: "macOS.tar.xz"

jobs:
  format:
    name: "Use clang-format"
    runs-on: ubuntu-latest
    steps:
    - name: ðŸš€ Checkout
      uses: actions/checkout@v2.3.2
    - name: Use clang-format
      uses: DoozyX/clang-format-lint-action@v0.11
      with:
        source: '.'
        clangFormatVersion: 11
        inplace: True

  build:
    needs: format
    name: "Build"
    runs-on: macos-latest
    steps:
    - name: âž• Install cmake
      uses: jwlawson/actions-setup-cmake@v1.6
      with:
        cmake-version: '${{env.CMAKE_VERSION}}'
        github-api-token: ${{ secrets.GITHUB_TOKEN }}

    - name: âž• Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3
      with:
        version: '${{env.NINJA_VERSION}}'

    - name: ðŸ“¥ Use ccache
      uses: hendrikmuhs/ccache-action@v1

    - name: ðŸ”§ Configure
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND cmake
            -S .
            -B build
            -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
            -G Ninja
            -D CMAKE_MAKE_PROGRAM=ninja
            -D CMAKE_C_COMPILER_LAUNCHER=ccache
            -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
    - name: ðŸ‘· Build
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")
        include(ProcessorCount)
        ProcessorCount(N)
        execute_process(
          COMMAND cmake --build build --config $ENV{BUILD_TYPE} --parallel ${N}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
    - name: âœ… Run tests
      shell: cmake -P {0}
      run: |
        include(ProcessorCount)
        ProcessorCount(N)
        set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")
        execute_process(
          COMMAND ctest -j ${N}
          WORKING_DIRECTORY build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Running tests failed!")
        endif()
    - name: âž• Install Strip
      run: cmake --install build --prefix instdir --strip


    - name: ðŸ“¦ Pack
      working-directory: instdir
      run: cmake -E tar cJfv ../${{ env.artifact }} .

    - name: ðŸš€ Upload
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.artifact }}
        path: ./

  release:
    name: "Release"
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: ðŸ”— Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    name: "Publish"
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url
    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ env.artifact }}
        asset_name: ${{ env.artifact }}
        asset_content_type: application/x-gtar
