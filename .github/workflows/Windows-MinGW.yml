name: Windows MinGW

on:
    push:
    pull_request:
    schedule:
    #Every Sunday at midnight
    - cron:  '0 0 * * 0'

env:
  CMAKE_VERSION: 3.15.x
  NINJA_VERSION: 1.10.0
  BUILD_TYPE: Release
  CCACHE_VERSION: 3.7.7
  CC: gcc
  CXX: g++
  environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
  artifact: "Windows-MinGW.tar.xz"
  BUILDCACHE_VERSION: 0.23.0
  BUILDCACHE_DIR: ${{ github.workspace }}/buildcache_dir

jobs:
  format:
    name: "Use clang-format"
    runs-on: ubuntu-latest
    steps:
    - name: ðŸš€ Checkout
      uses: actions/checkout@v2.3.2
    - name: Use clang-format
      uses: DoozyX/clang-format-lint-action@v0.11
      with:
        source: '.'
        clangFormatVersion: 11
        inplace: True

  build:
    needs: format
    name: "Build"
    runs-on: windows-latest
    steps:
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: "C:/ProgramData/chocolatey"
        key: cache-deps

    - name: Install MinGW-w64 and sudo
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: upgrade mingw sudo

    - name: âž• Install cmake
      uses: jwlawson/actions-setup-cmake@v1.6
      with:
        cmake-version: '${{env.CMAKE_VERSION}}'
        github-api-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download buildcache
      id: buildcache-download
      shell: cmake -P {0}
      run: |
          set(buildcache_suffix "win-msvc.zip")
          set(buildcache_version $ENV{BUILDCACHE_VERSION})
          set(buildcache_url "https://github.com/mbitsnbites/buildcache/releases/download/v${buildcache_version}/buildcache-${buildcache_suffix}")
          file(DOWNLOAD "${buildcache_url}" ./buildcache.zip)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./buildcache.zip)

    - name: Prepare cache timestamp
      id: cache_timestamp_string
      shell: cmake -P {0}
      run: |
          string(TIMESTAMP current_date "%Y-%m-%d" UTC)
          message("::set-output name=timestamp::${current_date}")
    - name: Cache Buildcache
      id: cache-buildcache
      uses: actions/cache@v2
      with:
        path: ${{ env.BUILDCACHE_DIR }}
        key: ${{ matrix.config.name }}-cache-v02-${{ steps.cache_timestamp_string.outputs.timestamp }}
    - name: Create Folder for buildcache
      run: New-Item ${{ env.BUILDCACHE_DIR }} -ItemType "directory" -Force
      shell: pwsh

    - name: Add buildcache to system path
      run: echo "${{github.workspace}}/buildcache/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
      shell: pwsh

    - name: âž• Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3
      with:
        version: '${{env.NINJA_VERSION}}'

    - name: ðŸ”§ Configure
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ env.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ env.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()
        set(path_separator ";")
        set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
        execute_process(
          COMMAND cmake
            -S .
            -B build
            -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
            -D RULE_LAUNCH_COMPILE=buildcache
            -G Ninja
            -D CMAKE_MAKE_PROGRAM=ninja
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
    - name: ðŸ‘· Build
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ env.environment_script }}" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()
        include(ProcessorCount)
        ProcessorCount(N)
        execute_process(
          COMMAND cmake --build build --config $ENV{BUILD_TYPE} --parallel ${N}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
    - name: âœ… Run tests
      shell: cmake -P {0}
      run: |
        include(ProcessorCount)
        ProcessorCount(N)
        set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")
        execute_process(
          COMMAND ctest -j ${N}
          WORKING_DIRECTORY build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Running tests failed!")
        endif()
    - name: âž• Install Strip
      run: cmake --install build --prefix instdir --strip


    - name: ðŸ“¦ Pack
      working-directory: instdir
      run: cmake -E tar cJfv ../${{ env.artifact }} .


    - name: ðŸš€ Upload
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.artifact }}
        path: ./

  release:
    name: "Release"
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: ðŸ”— Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    name: "Publish"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url
    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ env.artifact }}
        asset_name: ${{ env.artifact }}
        asset_content_type: application/x-gtar
